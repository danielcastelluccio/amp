use "std"
use "compiler/parser"
use "compiler/processor"
use "compiler/codegen/linux_x86-64"

struct UseToken {
    path: String
}

struct FunctionToken {
    name: String
    parameters: Array<String>
    returns: Array<String>
    instructions: LinkedList<Box>

    fn clone(function: &FunctionToken): FunctionToken {
        return FunctionToken(function.name.clone(), function.parameters.clone(), function.returns.clone(), LinkedList<Box>())
    }
}

struct InvokeToken {
    name: String
    parameters: Array<String>
}

struct StringToken {
    value: String
}

struct IntegerToken {
    value: integer
}

struct BooleanToken {
	value: boolean
}

struct ReturnToken {
    count: integer
}

struct DeclareToken {
    name: String
    type: String
}

struct RetrieveToken {
    name: String
}

struct StoreToken {
    name: String
}

struct JumpConditionalToken {
	id: integer
}

struct JumpToken {
	id: integer
}

struct TargetToken {
	id: integer
}

struct IntegerStore {
	value: integer
}


fn main(arguments: Array<String>) {
    if arguments.length < 1 {
        println("Must provide a file to compile.")
        @exit()
    }

    let file_name = arguments[0]
    let file = File::open(file_name.clone())
    let program = parse_file(file, IntegerStore(0))

    let result = process(program)

    if result == 0 {
        let file_name_split = file_name.split(".")
        create_linux_x86_64_binary(file_name_split[0], program)
    }
}
